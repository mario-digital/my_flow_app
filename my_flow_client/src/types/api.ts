/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/contexts': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Contexts
     * @description List all contexts for the authenticated user with pagination metadata.
     *
     *     Returns paginated contexts with metadata for UI components like
     *     "Page X of Y" indicators and "Load More" buttons.
     */
    get: operations['list_contexts_api_v1_contexts_get'];
    put?: never;
    /**
     * Create a new context
     * @description Create a new context for the authenticated user
     */
    post: operations['create_context_api_v1_contexts_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/contexts/{context_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a single context
     * @description Get a context by ID (requires ownership)
     */
    get: operations['get_context_api_v1_contexts__context_id__get'];
    /**
     * Update a context
     * @description Update a context by ID (requires ownership)
     */
    put: operations['update_context_api_v1_contexts__context_id__put'];
    post?: never;
    /**
     * Delete a context
     * @description Delete a context and all associated flows (requires ownership)
     */
    delete: operations['delete_context_api_v1_contexts__context_id__delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/contexts/{context_id}/flows': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List flows for a context
     * @description List all flows for a context with pagination and optional completion filter
     */
    get: operations['list_flows_api_v1_contexts__context_id__flows_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/flows': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create a new flow
     * @description Create a new flow in a context (requires context ownership)
     */
    post: operations['create_flow_api_v1_flows_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/flows/{flow_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a single flow
     * @description Get a flow by ID (requires ownership)
     */
    get: operations['get_flow_api_v1_flows__flow_id__get'];
    /**
     * Update a flow
     * @description Update a flow by ID (requires ownership)
     */
    put: operations['update_flow_api_v1_flows__flow_id__put'];
    post?: never;
    /**
     * Delete a flow
     * @description Delete a flow by ID (requires ownership)
     */
    delete: operations['delete_flow_api_v1_flows__flow_id__delete'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/flows/{flow_id}/complete': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Mark flow as complete
     * @description Mark a flow as completed (requires ownership)
     */
    patch: operations['mark_flow_complete_api_v1_flows__flow_id__complete_patch'];
    trace?: never;
  };
  '/api/v1/health': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Health Check
     * @description Health check endpoint with MongoDB connection status.
     */
    get: operations['health_check_api_v1_health_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Root
     * @description Root endpoint.
     */
    get: operations['root__get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/protected': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Protected Route
     * @description Protected endpoint that requires valid JWT authentication.
     */
    get: operations['protected_route_api_v1_protected_get'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * ContextCreate
     * @description Schema for creating a context.
     */
    ContextCreate: {
      /** Name */
      name: string;
      /** Color */
      color: string;
      /** Icon */
      icon: string;
    };
    /**
     * ContextInDB
     * @description Complete context schema with DB fields.
     * @example {
     *       "color": "#3B82F6",
     *       "created_at": "2025-09-30T10:00:00Z",
     *       "icon": "ðŸ’¼",
     *       "id": "507f1f77bcf86cd799439011",
     *       "name": "Work",
     *       "updated_at": "2025-09-30T10:00:00Z",
     *       "user_id": "logto_user_abc123"
     *     }
     */
    ContextInDB: {
      /** Name */
      name: string;
      /** Color */
      color: string;
      /** Icon */
      icon: string;
      /** Id */
      id: string;
      /** User Id */
      user_id: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /**
     * ContextUpdate
     * @description Schema for updating a context (partial).
     */
    ContextUpdate: {
      /** Name */
      name?: string | null;
      /** Color */
      color?: string | null;
      /** Icon */
      icon?: string | null;
    };
    /**
     * FlowCreate
     * @description Schema for creating a flow.
     */
    FlowCreate: {
      /** Title */
      title: string;
      /** Description */
      description?: string | null;
      /** @default medium */
      priority: components['schemas']['FlowPriority'];
      /** Due Date */
      due_date?: string | null;
      /**
       * Reminder Enabled
       * @default true
       */
      reminder_enabled: boolean;
      /** Context Id */
      context_id: string;
    };
    /**
     * FlowInDB
     * @description Complete flow schema with DB fields.
     * @example {
     *       "context_id": "507f1f77bcf86cd799439022",
     *       "created_at": "2025-10-05T10:00:00Z",
     *       "description": "Write comprehensive API docs",
     *       "due_date": "2025-10-15T17:00:00Z",
     *       "id": "507f1f77bcf86cd799439011",
     *       "is_completed": false,
     *       "priority": "high",
     *       "reminder_enabled": true,
     *       "title": "Complete project documentation",
     *       "updated_at": "2025-10-05T10:00:00Z",
     *       "user_id": "logto_user_abc123"
     *     }
     */
    FlowInDB: {
      /** Title */
      title: string;
      /** Description */
      description?: string | null;
      /** @default medium */
      priority: components['schemas']['FlowPriority'];
      /** Due Date */
      due_date?: string | null;
      /**
       * Reminder Enabled
       * @default true
       */
      reminder_enabled: boolean;
      /** Id */
      id: string;
      /** Context Id */
      context_id: string;
      /** User Id */
      user_id: string;
      /**
       * Is Completed
       * @default false
       */
      is_completed: boolean;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /** Completed At */
      completed_at?: string | null;
    };
    /**
     * FlowPriority
     * @description Priority levels for flows.
     * @enum {string}
     */
    FlowPriority: 'low' | 'medium' | 'high';
    /**
     * FlowUpdate
     * @description Schema for updating a flow (partial).
     */
    FlowUpdate: {
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
      priority?: components['schemas']['FlowPriority'] | null;
      /** Due Date */
      due_date?: string | null;
      /** Reminder Enabled */
      reminder_enabled?: boolean | null;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components['schemas']['ValidationError'][];
    };
    /**
     * PaginatedResponse[ContextInDB]
     * @example {
     *       "has_more": true,
     *       "items": [],
     *       "limit": 50,
     *       "offset": 0,
     *       "total": 150
     *     }
     */
    PaginatedResponse_ContextInDB_: {
      /**
       * Items
       * @description List of items for current page
       */
      items: components['schemas']['ContextInDB'][];
      /**
       * Total
       * @description Total count of all items
       */
      total: number;
      /**
       * Limit
       * @description Max items per page
       */
      limit: number;
      /**
       * Offset
       * @description Number of items skipped
       */
      offset: number;
      /**
       * Has More
       * @description True if more items available
       */
      has_more: boolean;
    };
    /**
     * PaginatedResponse[FlowInDB]
     * @example {
     *       "has_more": true,
     *       "items": [],
     *       "limit": 50,
     *       "offset": 0,
     *       "total": 150
     *     }
     */
    PaginatedResponse_FlowInDB_: {
      /**
       * Items
       * @description List of items for current page
       */
      items: components['schemas']['FlowInDB'][];
      /**
       * Total
       * @description Total count of all items
       */
      total: number;
      /**
       * Limit
       * @description Max items per page
       */
      limit: number;
      /**
       * Offset
       * @description Number of items skipped
       */
      offset: number;
      /**
       * Has More
       * @description True if more items available
       */
      has_more: boolean;
    };
    /**
     * RateLimitError
     * @description Rate limit exceeded error response.
     * @example {
     *       "detail": "Rate limit exceeded. Please try again later.",
     *       "retry_after": 60
     *     }
     */
    RateLimitError: {
      /**
       * Detail
       * @description Human-readable explanation of the rate limit violation.
       */
      detail: string;
      /**
       * Retry After
       * @description Seconds until rate limit resets
       * @example 60
       */
      retry_after: number;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  list_contexts_api_v1_contexts_get: {
    parameters: {
      query?: {
        /** @description Max items per page */
        limit?: number;
        /** @description Number of items to skip */
        offset?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PaginatedResponse_ContextInDB_'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Rate limit exceeded */
      429: {
        headers: {
          /** @description Seconds until rate limit resets */
          'Retry-After'?: number;
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimitError'];
        };
      };
    };
  };
  create_context_api_v1_contexts_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ContextCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ContextInDB'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Rate limit exceeded */
      429: {
        headers: {
          /** @description Seconds until rate limit resets */
          'Retry-After'?: number;
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimitError'];
        };
      };
    };
  };
  get_context_api_v1_contexts__context_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        context_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ContextInDB'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Rate limit exceeded */
      429: {
        headers: {
          /** @description Seconds until rate limit resets */
          'Retry-After'?: number;
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimitError'];
        };
      };
    };
  };
  update_context_api_v1_contexts__context_id__put: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        context_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ContextUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ContextInDB'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Rate limit exceeded */
      429: {
        headers: {
          /** @description Seconds until rate limit resets */
          'Retry-After'?: number;
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimitError'];
        };
      };
    };
  };
  delete_context_api_v1_contexts__context_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        context_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Rate limit exceeded */
      429: {
        headers: {
          /** @description Seconds until rate limit resets */
          'Retry-After'?: number;
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimitError'];
        };
      };
    };
  };
  list_flows_api_v1_contexts__context_id__flows_get: {
    parameters: {
      query?: {
        /** @description Include completed flows */
        include_completed?: boolean;
        /** @description Max items per page */
        limit?: number;
        /** @description Number of items to skip */
        offset?: number;
      };
      header?: never;
      path: {
        context_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PaginatedResponse_FlowInDB_'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Rate limit exceeded */
      429: {
        headers: {
          /** @description Seconds until rate limit resets */
          'Retry-After'?: number;
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimitError'];
        };
      };
    };
  };
  create_flow_api_v1_flows_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FlowCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FlowInDB'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Rate limit exceeded */
      429: {
        headers: {
          /** @description Seconds until rate limit resets */
          'Retry-After'?: number;
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimitError'];
        };
      };
    };
  };
  get_flow_api_v1_flows__flow_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        flow_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FlowInDB'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Rate limit exceeded */
      429: {
        headers: {
          /** @description Seconds until rate limit resets */
          'Retry-After'?: number;
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimitError'];
        };
      };
    };
  };
  update_flow_api_v1_flows__flow_id__put: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        flow_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FlowUpdate'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FlowInDB'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Rate limit exceeded */
      429: {
        headers: {
          /** @description Seconds until rate limit resets */
          'Retry-After'?: number;
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimitError'];
        };
      };
    };
  };
  delete_flow_api_v1_flows__flow_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        flow_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Rate limit exceeded */
      429: {
        headers: {
          /** @description Seconds until rate limit resets */
          'Retry-After'?: number;
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimitError'];
        };
      };
    };
  };
  mark_flow_complete_api_v1_flows__flow_id__complete_patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        flow_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['FlowInDB'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['HTTPValidationError'];
        };
      };
      /** @description Rate limit exceeded */
      429: {
        headers: {
          /** @description Seconds until rate limit resets */
          'Retry-After'?: number;
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RateLimitError'];
        };
      };
    };
  };
  health_check_api_v1_health_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            [key: string]: string | boolean;
          };
        };
      };
    };
  };
  root__get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            [key: string]: string;
          };
        };
      };
    };
  };
  protected_route_api_v1_protected_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            [key: string]: string;
          };
        };
      };
    };
  };
}
